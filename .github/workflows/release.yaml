name: release-flow

# https://help.github.com/en/articles/events-that-trigger-workflows#release-event-release
# model taken from https://github.com/mockersf/kmanb/releases
# on: release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+*"

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install Dependencies
        run: |
          sudo apt-get install -y libgdbm-dev libsnappy-dev make pkg-config rlwrap screen software-properties-common sudo unzip zlib1g-dev zsh
          sudo apt-get install -y wget emacs joe
          sudo apt-get install -y g++-11 clang-12
          sudo apt-get install -y g++ gcc gfortran
          sudo apt-get install -y git cmake
          sudo apt-get install -y libgmp-dev
          sudo apt-get install -y libboost-dev libboost-mpi-dev libboost-serialization-dev
          sudo apt-get install -y libtbb-dev libgsl-dev libglpk-dev libflint-dev
          sudo apt-get install -y autoconf autotools-dev libtool
          sudo apt-get install -y texlive-latex-base # needed for the CDD manual to be compiled
          sudo apt-get install -y libcurl4-gnutls-dev
          sudo apt-get install -y libntl-dev libmpfr-dev
          sudo apt-get install -y openmpi-bin libopenmpi-dev

      - name: Build and release
        run: |
          export GMP_INCDIR="/usr/include"
          export GMP_CXX_LINK="-lm -lgmp -lgmpxx"
          export BOOST_INCDIR="/usr/include"
          export BOOST_LINK="-lboost_serialization"
          export EIGEN_PATH=/opt/eigen
          export TBB_INCDIR=/usr/include
          export TBB_LINK="-ltbb"
          export GSL_INCDIR=/usr/include
          export GSL_C_LINK="-lgsl -lgslcblas"
          export GLPK_PATH=/usr
          export GLPK_INCLUDE "-I$GLPK_PATH/include"
          export GLPK_LINK="-L$GLPK_PATH/lib -lglpk -Wl,-rpath,$GLPK_PATH/lib"
          export FLINT_INCDIR="/include"
          export FLINT_LINK="-lflint"
          export CDDLIB_PATH=/opt/cddlib
          export CDDLIB_INCLUDE="-I$CDDLIB_PATH/include/cddlib"
          export CDDLIB_DOUBLE_LINK="-L$CDDLIB_PATH/lib  -lcdd -Wl,-rpath,$CDDLIB_PATH/lib"
          export CDDLIB_GMP_LINK="-L$CDDLIB_PATH/lib  -lcddgmp -Wl,-rpath,$CDDLIB_PATH/lib"
          export NETCDF_CXX_PATH="/opt/netcdf-cxx4-4.3.1"
          export NETCDF_C_PATH="/opt/netcdf-4.8.0"
          export NETCDF_CXX_ALLINC="-I$NETCDF_CXX_PATH/include -I$NETCDF_C_PATH/include"
          export NETCDF_CXX_LINK="-L$NETCDF_CXX_PATH/lib -lnetcdf_c++4 -Wl,-rpath,$NETCDF_CXX_PATH/lib"
          export LINBOX_PATH=/opt/linbox
          export LINBOX_INCLUDE="-DHAVE_CONFIG_H -DDISABLE_COMMENTATOR -DNDEBUG -UDEBUG -fopenmp -I$LINBOX_PATH/include"
          export LINBOX_LINK="-fopenmp -lntl -lmpfr -lflint -L$LINBOX_PATH/lib -lopenblas -lpthread -lgfortran -lgivaro -lgmpxx -lgmp -Wl,-rpath,$CDDLIB_PATH/lib"
          export NAUTY_PATH=/opt/nauty
          export NAUTY_INCLUDE="-I$NAUTY_PATH/include"
          export NAUTY_LINK="-L$NAUTY_PATH/lib -lnauty -Wl,-rpath,$NAUTY_PATH/lib"
          cd basic_common_cpp/ExternalLib/nauty && mkdir build
          cd basic_common_cpp/ExternalLib/nauty/build && cmake -DCMAKE_INSTALL_PREFIX:PATH=$NAUTY_PATH .. && make all install
          cd src_lorenzian && make && strip LORENTZ_FundDomain_AllcockEdgewalk
      - uses: papeloto/action-zip@v1
        with:
          files: target/release/kmanb
          dest: kmanb-linux.zip
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: kmanb-linux.zip
          asset_name: kmanb-linux-$VERSION.zip
          tag: ${{ github.ref }}
          overwrite: true
