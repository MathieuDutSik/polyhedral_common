// Copyright (C) 2022 Mathieu Dutour Sikiric <mathieu.dutour@gmail.com>
#ifndef SRC_LATT_NIEMEIERN23_24A1_H_
#define SRC_LATT_NIEMEIERN23_24A1_H_

#include <vector>

template <typename T> MyMatrix<T> Get_N23_eBasis() {
  T eDen = 1;
  std::vector<std::vector<T>> ListListNum = {
      {0, 0, -1, 0, -1, -1, 1, 1,  0, 0, -1, 0,
       0, 0, 0,  1, 0,  0,  0, -1, 0, 0, 1,  2},
      {0, 0, 1, 1, -1, 0, 0, 0, 0,  -1, 0, 1,
       0, 0, 0, 0, 0,  0, 1, 1, -1, -1, 1, 0},
      {0, 0, 0, 0,  0, 0, -1, 0, 1, 0,  0, 1,
       0, 0, 0, -1, 0, 0, 0,  0, 1, -1, 0, 0},
      {-1, 1, -1, 0, 1, 0, 1, -1, 0,  0,  1,  -1,
       0,  0, 0,  0, 0, 2, 0, 1,  -1, -1, -1, 0},
      {-1, -1, 1, 0, 0, 0, -1, 2,  -1, 1, 0, -1,
       0,  0,  0, 0, 2, 0, -1, -1, 1,  1, 1, 0},
      {0, -1, 0, 0, 0, 1, 0,  1,  0, 1, 0, -1,
       0, 0,  0, 0, 0, 0, -1, -1, 1, 1, 1, 0},
      {-1, -1, 0, -1, -1, -1, 1, 0,  -1, 0, -1, 0,
       0,  2,  0, 1,  0,  0,  0, -1, 0,  0, 1,  0},
      {-1, 0, 0, -1, 0, 1, 0,  0,  -1, 1, 0, 0,
       0,  0, 0, 1,  0, 0, -1, -1, 0,  0, 1, 0},
      {0, 0, 0, -1, 0, 0, 0, 1,  -1, 0, -1, 0,
       0, 0, 0, 1,  0, 0, 0, -1, 0,  0, 1,  0},
      {-1, 0, 0, 0, 0, 0, 0,  0, 0, 1, 1, -1,
       0,  0, 0, 1, 0, 0, -1, 0, 1, 1, 0, 0},
      {-1, 0, 2, -1, -1, 1, -1, 1, 0, 0, 0, 1,
       0,  0, 2, -1, 0,  0, 0,  0, 1, 1, 0, 0},
      {0, -1, 1, 0,  -1, 0, 0, 1, 0, 0, 0, 1,
       0, 0,  0, -1, 0,  0, 0, 0, 1, 1, 0, 0},
      {0, 0, 1, 1, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
      {0, -1, -1, 0, 0, -1, 1, 1, 1, 1, -1, 0,
       0, 0,  0,  0, 0, 0,  1, 0, 0, 0, 0,  0},
      {1,  1, 0, 1, 1, 1, 0, 0, -1, -1, 1, 0,
       -2, 0, 0, 0, 0, 0, 1, 0, 0,  0,  0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
  int nbRow = 24;
  int nbCol = 24;
  MyMatrix<T> RetMat(nbRow, nbCol);
  for (int iRow = 0; iRow < nbRow; iRow++)
    for (int iCol = 0; iCol < nbCol; iCol++) {
      T eVal = ListListNum[iRow][iCol];
      RetMat(iRow, iCol) = eVal / eDen;
    }
  return RetMat;
}

template <typename T> MyMatrix<T> Get_N23_InvBasis() {
  T eDen = 2;
  std::vector<std::vector<T>> ListListNum = {
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0,  0, 0,  0, 1, -1, 0, 0, 0,
       0, 1, 0, -1, 0, -1, 0, 0, 0,  1, 1, 1},
      {0, 0, 0, 0, 0, 0, 0,  1, -1, 0,  0, 0,
       1, 0, 0, 0, 1, 0, -1, 0, -1, -1, 0, 1},
      {0, 0, 0, 0, 0, -1, 0, 1, 0, 0,  0, 1,
       0, 0, 0, 1, 0, 0,  0, 1, 1, -1, 0, 1},
      {0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0, 0,
       1, 0, -1, -1, 0, 0, 1, 1, 0, -1, 1, 1},
      {0, 0, 0, 0, 0, 0,  1, 0, -1, 0, 0, 0,
       0, 0, 0, 0, 1, -1, 1, 1, 0,  0, 1, 1},
      {0, 0, 0, 0, 0, 0, 0,  0, 0, 0,  1,  -1,
       0, 0, 0, 0, 0, 1, -1, 0, 1, -1, -1, 1},
      {0, 0, 0, 0, 0, -1, 0, 0, 1, 1, 0,  0,
       0, 0, 0, 1, 0, 0,  1, 0, 1, 0, -1, 1},
      {0, 0, 0, 0, 1,  -1, 0, 0, 0, 0,  0, 0,
       0, 0, 0, 1, -1, 1,  1, 0, 0, -1, 0, 1},
      {0, 0, 0, 1, 0,  0,  0, 0, 1, 0, 0, 1,
       0, 0, 0, 1, -1, -1, 0, 0, 1, 0, 0, 1},
      {0, 0, 0, 0,  0,  0,  0, 0, 0,  0, 0, 0,
       1, 1, 0, -1, -1, -1, 1, 0, -1, 0, 1, 0},
      {0,  1, 0, 0,  0, 0, 0, -1, 0,  1, 0, 0,
       -1, 0, 0, -1, 0, 0, 1, 1,  -1, 0, 0, 0},
      {0, 0, 1, 0,  0,  0, 0, -1, 1, 1, 0, 0,
       0, 0, 0, -1, -1, 1, 1, 0,  0, 0, 0, 0},
      {0, 0, -1, 0, 0,  0,  0, 0, 0, 0,  0, 1,
       0, 0, 0,  1, -1, -1, 0, 1, 0, -1, 1, 0},
      {0, 1, 0, 0, 0,  1, 0,  0, 0,  0,  0, 0,
       0, 0, 0, 0, -1, 0, -1, 1, -1, -1, 1, 0},
      {1, 0, 0, 0,  0, 0,  0, 0, -1, 0, 0, 0,
       0, 0, 0, -1, 0, -1, 1, 1, -1, 1, 0, 0}};
  int nbRow = 24;
  int nbCol = 24;
  MyMatrix<T> RetMat(nbRow, nbCol);
  for (int iRow = 0; iRow < nbRow; iRow++)
    for (int iCol = 0; iCol < nbCol; iCol++) {
      T eVal = ListListNum[iRow][iCol];
      RetMat(iRow, iCol) = eVal / eDen;
    }
  return RetMat;
}

template <typename T> MyMatrix<T> Get_N23_TotBasisQuotInv() {
  T eDen = 2;
  std::vector<std::vector<T>> ListListNum = {
      {0, 0, 0, 0,  0, 0,  0, 1, -1, 0, 0, 0,
       0, 1, 0, -1, 0, -1, 0, 0, 0,  1, 1, 1},
      {0, 0, 0, 0, 0, 0, 0,  1, -1, 0,  0, 0,
       1, 0, 0, 0, 1, 0, -1, 0, -1, -1, 0, 1},
      {0, 0, 0, 0, 0, -1, 0, 1, 0, 0,  0, 1,
       0, 0, 0, 1, 0, 0,  0, 1, 1, -1, 0, 1},
      {0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0, 0,
       1, 0, -1, -1, 0, 0, 1, 1, 0, -1, 1, 1},
      {0, 0, 0, 0, 0, 0,  1, 0, -1, 0, 0, 0,
       0, 0, 0, 0, 1, -1, 1, 1, 0,  0, 1, 1},
      {0, 0, 0, 0, 0, 0, 0,  0, 0, 0,  1,  -1,
       0, 0, 0, 0, 0, 1, -1, 0, 1, -1, -1, 1},
      {0, 0, 0, 0, 0, -1, 0, 0, 1, 1, 0,  0,
       0, 0, 0, 1, 0, 0,  1, 0, 1, 0, -1, 1},
      {0, 0, 0, 0, 1,  -1, 0, 0, 0, 0,  0, 0,
       0, 0, 0, 1, -1, 1,  1, 0, 0, -1, 0, 1},
      {0, 0, 0, 1, 0,  0,  0, 0, 1, 0, 0, 1,
       0, 0, 0, 1, -1, -1, 0, 0, 1, 0, 0, 1},
      {0,  1, 0, 0,  0, 0, 0, -1, 0,  1, 0, 0,
       -1, 0, 0, -1, 0, 0, 1, 1,  -1, 0, 0, 0},
      {0, 0, 1, 0,  0,  0, 0, -1, 1, 1, 0, 0,
       0, 0, 0, -1, -1, 1, 1, 0,  0, 0, 0, 0},
      {1, 0, 0, 0,  0, 0,  0, 0, -1, 0, 0, 0,
       0, 0, 0, -1, 0, -1, 1, 1, -1, 1, 0, 0}};
  int nbRow = 12;
  int nbCol = 24;
  MyMatrix<T> RetMat(nbRow, nbCol);
  for (int iRow = 0; iRow < nbRow; iRow++)
    for (int iCol = 0; iCol < nbCol; iCol++) {
      T eVal = ListListNum[iRow][iCol];
      RetMat(iRow, iCol) = eVal / eDen;
    }
  return RetMat;
}

// clang-format off
#endif  // SRC_LATT_NIEMEIERN23_24A1_H_
// clang-format on
