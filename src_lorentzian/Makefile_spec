#PROGRAM		= LORENTZ_FundDomain_AllcockEdgewalk
#PROGRAM		= COXDYN_FindExtensions
#PROGRAM		= COXDYN_ComputeSymbol
#PROGRAM		= LORENTZ_TwoDimAnisotropic_Allcock
#PROGRAM		= LORENTZ_FundDomain_Vinberg
#PROGRAM		= LORENTZ_FundDomain_AllcockEdgewalk LORENTZ_FundDomain_AllcockEdgewalk_Isomorphism
#PROGRAM		= LORENTZ_FundDomain_AllcockEdgewalk COXDYN_FindExtensions
#PROGRAM		= LORENTZ_FundDomain_AllcockEdgewalk LORENTZ_FundDomain_Vinberg
#PROGRAM		= LATT_GetIntegralMatricesPossibleOrders
#PROGRAM		= LORENTZ_FundDomain_AllcockEdgewalk LORENTZ_ComputeStabilizer_Vertex
PROGRAM		= LORENTZ_FundDomain_AllcockEdgewalk
#PROGRAM		= LORENTZ_ReflectiveEdgewalk
#PROGRAM		= LORENTZ_ComputeStabilizer_Vertex
#PROGRAM		= LORENTZ_FundDomain_AllcockEdgewalk
#PROGRAM		= LORENTZ_ComputeRoots_Vertex
#PROGRAM		= COXDYN_FindExtensionsCoxMat
#PROGRAM		= LORENTZ_SingleEdgewalk
#PROGRAM		= COXDYN_GetFacetOneDomain
#PROGRAM		= LORENTZ_MPI_PerfectLorentzian
#PROGRAM		= LORENTZ_PERF_Isomorphism LORENTZ_PERF_Automorphism
#PROGRAM		= LORENTZ_PERF_Isomorphism
#PROGRAM		= LORENTZ_PERF_Automorphism


SRCFILES	= POLY_c_cddlib_mpq.cpp
OBJECTS		= $(SRCFILES:.cpp=.o) $(PROGRAM:%=%.o)
LINKOBJECTS	= $(SRCFILES:.cpp=.o)


CC		= g++ -std=c++17 -Wall -Wextra -g -O3
#   APPLE CLANG
#CC              = g++ -std=c++17 -Wall -Wextra -g -O3 -fsanitize=address -fsanitize=pointer-subtract -fsanitize=undefined -fsanitize=null -fsanitize=bounds -fsanitize=alignment -Wstrict-aliasing
#   GCC
#CC             = g++ -std=c++17 -Wall -Wextra -g -O3 -fsanitize=address -fsanitize=pointer-subtract -fsanitize=undefined -fsanitize=null -fsanitize=bounds -fsanitize=bounds-strict -fsanitize=alignment -fsanitize=leak -Wstrict-aliasing

NOLINKFLAG 	= -c
OUTPUTFLAG 	= -o

CLOCAL          = -I../src_basic -I../src_number -I../src_matrix -I../src_isotropy -I../src_comb -I../src_graph -I../src_group -I../src_latt -I../src_poly -I../src_dualdesc -I../src_short -I../permutalib/src -I../src_enum_schemes -I.
#CFLAGS 		= -I$(GMP_INCDIR) -I$(LIBBLISS_INCDIR) -I$(BOOST_INCDIR) -I$(EIGEN_PATH) $(NAUTY_INCLUDE) $(GLPK_INCLUDE) $(CDDLIB_INCLUDE)
CFLAGS 		= -I$(GMP_INCDIR) -I$(BOOST_INCDIR) -I$(EIGEN_PATH) $(NAUTY_INCLUDE) $(shell pkg-config --cflags ompi)
CHASHMAP        = -I../basic_common_cpp/sparse-map/include/tsl/ -I../basic_common_cpp/robin-map/include/tsl/ -I../basic_common_cpp/hopscotch-map/include/tsl/

#CDEFS           = -DTIMINGS -DDEBUG_SPECIFIC -DDEBUG -DDEBUG_MATRIX_GROUP -DPERMUTALIB_BLOCKING_SANITY_CHECK
#CDEFS           = -DDEBUG_SPECIFIC -DDEBUG -DDEBUG_MATRIX_GROUP -DPERMUTALIB_BLOCKING_SANITY_CHECK
#CDEFS           = -DTIMINGS
#CDEFS           = -DSANITY_CHECK -DPRINT_SYMBOL_INFORMATION -DDEBUG_MATRIX_GROUP -DDEBUG_LORENTZIAN_LINALG
#CDEFS           = -DSANITY_CHECK -DPRINT_SYMBOL_INFORMATION
#CDEFS           = -DSANITY_CHECK -DPRINT_SYMBOL_INFORMATION -DMATRIX_GROUP_DIAGNOSTICS
#CDEFS           = -DSANITY_CHECK -DPRINT_SYMBOL_INFORMATION -DMATRIX_GROUP_DIAGNOSTICS -DDEBUG_MATRIX_GROUP -DDEBUG_LORENTZIAN_LINALG -DTIMINGS -DDEBUG_POSITIVITY -DTRACK_INFOS_LOG
#CDEFS           = -DDEBUG_CDD
#CDEFS           = -DDEBUG -DTIMINGS
#CDEFS           = -DDEBUG_LORENTZIAN_PERFECT
#CDEFS           = -DDEBUG_LORENTZIAN_PERFECT -DDEBUG_LORENTZIAN_FIND_POSITIVE_VECTORS
#CDEFS           = -DDEBUG_LORENTZIAN_PERFECT -DDEBUG_LORENTZIAN_FIND_POSITIVE_VECTORS -DDEBUG_POSITIVITY -DTIMINGS_ADJACENCY_SCHEME -DDEBUG_ADJACENCY_SCHEME
#CDEFS           = -DDEBUG_LORENTZIAN_PERFECT -DDEBUG_SHVEC
CDEFS           =
#CDEFS           = -DSANITY_CHECK
#CDEFS           = -DSANITY_CHECK -DDEBUG -DTIMINGS
#CDEFS           = -DSANITY_CHECK -DPRINT_SYMBOL_INFORMATION -DDEBUG_LORENTZIAN_LINALG -DDEBUG_POSITIVITY -DTRACK_INFOS_LOG -DDEBUG_MATRIX_GROUP -DCHECK_LORENTZIAN_STAB_EQUIV -DDEBUG_LORENTZIAN_STAB_EQUIV -DTIMINGS -DDEBUG_EDGEWALK_GENERIC -DPERMUTALIB_BLOCKING_SANITY_CHECK -DDEBUG_GET_CANONICALIZED_RECORD

CTOTAL          = $(CLOCAL) $(CFLAGS) $(CHASHMAP) $(CDEFS)




#LIBS		= -lm $(GMP_CXX_LINK) -pthread $(LIBBLISS_LINK) $(BOOST_LINK) $(NAUTY_LINK) $(GLPK_LINK) $(CDDLIB_GMP_LINK)
LIBS		= -lm $(GMP_CXX_LINK) -pthread $(BOOST_LINK) $(NAUTY_LINK) $(shell pkg-config --libs ompi) $(MPI_LINK_CPP)


%.o: %.cpp
	@echo
	@echo compile $<
	$(CC) $(OUTPUTFLAG) $@ $(CTOTAL) $(NOLINKFLAG) $<

all:	$(PROGRAM)

$(PROGRAM): 	$(OBJECTS)
		@echo
		@echo link $@
		$(CC) $(LINKOBJECTS) $(DEBUGFLAG) $@.o $(LIBS) -o $@

clean:;
	rm -f *.o
	rm -f $(PROGRAM)
