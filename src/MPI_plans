MPI is absolutely needed for making polyhedral computations on parallel
computers.

Requirements:
a) everything works if the number of processors is exactly 1.
This means asynchronous exchanges from one processor to the same.
Extremely hard to make work.
b) For storing list of known objects, e.g.
  --- list of known polytopes with dual descriptions
  --- list of Delaunay polytopes / perfect forms.
  Features:
  --- Use of hash maps in order to determine which block of the bank they belong to.
  --- Single processor used for storing data OR implement locks in MPI.
  --- Maybe we should have a single processor for doing super fast operations like storing
      which banking process is in waiting state.
  --- Even single info like number of Stored objects cannot be shared easily.
  --- Atomic queries between processes is needed. We need to be able to ask the 

c) Need for infinite loops of the form
  while(1) {
    mpi_irecv(.... , MPI_ANY_SOURCE, ....)
    // depending on the received values we spawn a relevant computing process.
    
  }

d) Apparently, we have to decide from the start which processors is doing what.
   


